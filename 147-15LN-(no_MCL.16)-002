library(ggfortify)
library(DESeq2)
library(tidyverse)

load ("results/preprocessing.RData")
# We estimate the variance for each row in the logcounts matrix
countVar <- apply(rlogcounts, 1, var)
# Get the row numbers for the top 500 most variable genes
highVar <- order(countVar, decreasing=TRUE)[1:500]
# Subset logcounts matrix
hmDat <- rlogcounts[highVar,]


library(gplots)
library(RColorBrewer)

# Get some nicer colours
mypalette <- brewer.pal(11, "RdYlBu")
# http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3
morecols <- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.sample <- c("purple","orange")[sampleinfo$condition]
# Plot the heatmap

condition_color <- unlist( lapply(sampleinfo$condition, function(x){  
                  if (grepl("Resistant", x)) "purple"     
                  else if (grepl("Sensitive", x)) "orange"
                  }))

tissue_color <- unlist( lapply(sampleinfo$tissue, function(x){  
                  if (grepl("LN", x)) "red"     
                  else if (grepl("PB", x)) "green"
                  else if (grepl("PE", x)) "yellow"
 
 }))       
 myCols <- cbind(condition_color,tissue_color )
 colnames(myCols)[1] <- "Condtion"
 colnames(myCols)[2] <- "Tissue"
 
 #install.packages("heatmap.plus")
 library("heatmap.plus")
 
 pdf("21Heatmap_unsuper.plus.pdf",width=7,height=5)
 heatmap.plus(hmDat, 
          col=rev(morecols(50)),
          trace="column", 
          main="Top 500 most variable genes across samples",
          ColSideColors=myCols,
          scale="row")
dev.off()



################
### DESeq2
# first lets check that our rows and columns match
all(sampleinfo$Sample == colnames(countdata))

# create the design formula
design <- as.formula(~ condition)
# create the DESeqDataSet object
ddsObj <- DESeqDataSetFromMatrix(countData = countdata,
                              colData = sampleinfo,
                              design = design)
                              
                              
# Apply normalisation to DDS object
ddsObj <- estimateSizeFactors(ddsObj)
sizeFactors(ddsObj)

library(limma)
logcounts <- log2(countdata + 1)

normalizedCounts <- counts(ddsObj, normalized=TRUE) 
logNormalizedCounts <- log2(normalizedCounts + 1)


pdf("Normalization_compare.pdf",width=7,height=5)
par(mfrow=c(1,2))
plotMA(logcounts, array = 7)
abline(h=0,col="grey")
plotMA(logcounts, array = 11)
abline(h=0,col="grey")


par(mfrow=c(1,2))
plotMA(logNormalizedCounts, array = 7)
abline(h=0,col="grey")
plotMA(logNormalizedCounts, array = 11)
abline(h=0,col="grey")

dev.off()

save(countdata, rlogcounts, sampleinfo, logNormalizedCounts, file="results/preprocessing_2.RData")
