
load("results/DE.RData")
load("results/annot.RData")
library(dplyr)
library(biomaRt)
library(DESeq2)
library(tidyverse)
library(gplots)
library(RColorBrewer)

resTissue_vV <- results(ddsObj, 
                  name="tissue_PB_vs_LN", 
                  alpha = 0.05)

resTissue_vV  <- as.data.frame(resTissue_vV) %>% 
    rownames_to_column("GeneID") %>% 
    left_join( annotL, "GeneID") 

resTissue_vV.nona<- resTissue_vV[!is.na(resTissue_vV$Symbol),]
resTissue_vV.0.01 <- resTissue_vV.nona[(resTissue_vV.nona$padj < 0.01),]
resTissue_vV.0.01 <- resTissue_vV.0.01[!is.na(resTissue_vV.0.01$GeneID),]
dim(resTissue_vV.0.01) #3557

hmDat <- logNormalizedCounts[resTissue_vV.0.01$GeneID,]

# Get some nicer colours
mypalette <- brewer.pal(11, "RdYlBu")
# http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3
morecols <- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.sample <- c("purple","orange")[sampleinfo$condition]
# Plot the heatmap

# Get some nicer colours
mypalette <- brewer.pal(11, "RdYlBu")
# http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3
morecols <- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.sample <- c("purple","orange")[sampleinfo$condition]
# Plot the heatmap

condition_color <- unlist( lapply(sampleinfo$condition, function(x){  
                  if (grepl("Resistant", x)) "purple"     
                  else if (grepl("Sensitive", x)) "orange"
                  }))

tissue_color <- unlist( lapply(sampleinfo$tissue, function(x){  
                  if (grepl("LN", x)) "red"     
                  else if (grepl("PB", x)) "green"
                  else if (grepl("PE", x)) "yellow"
 
 }))       
 myCols <- cbind(condition_color,tissue_color )
 colnames(myCols)[1] <- "Condtion"
 colnames(myCols)[2] <- "Tissue"
 
 #install.packages("heatmap.plus")
 library("heatmap.plus")
 
 pdf("21-tissue0.01.plus.pdf",width=7,height=5)
 heatmap.plus(hmDat, 
          col=rev(morecols(50)),
          trace="column", 
          main="LN_vs_PB",
          ColSideColors=myCols,
          scale="row")
dev.off()

######################################


resCond_vV <- results(ddsObj, 
                  name="condition_Sensitive_vs_Resistant", 
                  alpha = 0.05)

resCond_vV  <- as.data.frame(resCond_vV) %>% 
    rownames_to_column("GeneID") %>% 
    left_join( annotL, "GeneID") 

resCond_vV.nona<- resCond_vV[!is.na(resCond_vV$Symbol),]
resCond_vV.0.01 <- resCond_vV.nona[(resCond_vV.nona$padj < 0.01),]
resCond_vV.0.01 <- resCond_vV.0.01[!is.na(resCond_vV.0.01$GeneID),]
dim(resCond_vV.0.01) #3557

hmDat <- logNormalizedCounts[resCond_vV.0.01$GeneID,]

# Get some nicer colours
mypalette <- brewer.pal(11, "RdYlBu")
# http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3
morecols <- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.sample <- c("purple","orange")[sampleinfo$condition]
# Plot the heatmap

# Get some nicer colours
mypalette <- brewer.pal(11, "RdYlBu")
# http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3
morecols <- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.sample <- c("purple","orange")[sampleinfo$condition]
# Plot the heatmap

condition_color <- unlist( lapply(sampleinfo$condition, function(x){  
                  if (grepl("Resistant", x)) "purple"     
                  else if (grepl("Sensitive", x)) "orange"
                  }))

tissue_color <- unlist( lapply(sampleinfo$tissue, function(x){  
                  if (grepl("LN", x)) "red"     
                  else if (grepl("PB", x)) "green"
                  else if (grepl("PE", x)) "yellow"
 
 }))       
 myCols <- cbind(condition_color,tissue_color )
 colnames(myCols)[1] <- "Condtion"
 colnames(myCols)[2] <- "Tissue"
 
 #install.packages("heatmap.plus")
 library("heatmap.plus")
 
 pdf("21-condition_0.01.plus.pdf",width=7,height=5)
 heatmap.plus(hmDat, 
          col=rev(morecols(50)),
          trace="column", 
          main="Sensetive_vs_Resistant",
          ColSideColors=myCols,
          scale="row")
dev.off()

##############################################
##############################################
trueR <- resCond_vV.0.01[!(resCond_vV.0.01$GeneID %in% resTissue_vV.0.01$GeneID),]

hmDat <- logNormalizedCounts[trueR$GeneID,]
rownames(hmDat) <- trueR$Symbol
tissue_color <- unlist( lapply(sampleinfo$tissue, function(x){  
                  if (grepl("LN", x)) "red"     
                  else if (grepl("PB", x)) "green"
                  else if (grepl("PE", x)) "yellow"
 
 }))       
 myCols <- cbind(condition_color,tissue_color )
 colnames(myCols)[1] <- "Condtion"
 colnames(myCols)[2] <- "Tissue"
 
 #install.packages("heatmap.plus")
 library("heatmap.plus")
 
 pdf("21-IBN-true.01.plus.pdf",width=7,height=5)
 heatmap.plus(hmDat, 
          col=rev(morecols(50)),
          trace="column", 
          main="Sensetive_vs_Resistant remove tissue effect",
          ColSideColors=myCols,
          scale="row")
dev.off()


###################################################
ddsShrink_Condition <- lfcShrink(ddsObj, coef="condition_Sensitive_vs_Resistant")
shrinkLvV_Condition <- as.data.frame(ddsShrink_Condition) %>%
    rownames_to_column("GeneID") %>% 
    left_join(annotL, "GeneID") 
shrinkLvV_Condition<- shrinkLvV_Condition[(shrinkLvV_Condition$GeneID %in% trueR$GeneID),]
dim(shrinkLvV_Condition)
shrinkLvV_Condition <- shrinkLvV_Condition[!is.na(shrinkLvV_Condition$Symbol),]
dim(shrinkLvV_Condition)

# add a column with the names of only the top 10 genes
cutoff <- sort(shrinkLvV_Condition$pvalue)[49]
shrinkLvV_Condition <- shrinkLvV_Condition %>% 
    mutate(TopGeneLabel=ifelse(pvalue<=cutoff, Symbol, ""))

 pdf("21-Condition_DE_0.01.pdf",width=7,height=5)
 ggplot(shrinkLvV_Condition, aes(x = log2(baseMean), y=log2FoldChange)) + 
    geom_point(aes(colour=padj < 0.05), shape=20, size=0.5) +
    geom_text(aes(label=TopGeneLabel)) +
    labs(x="mean of normalised counts", y="log fold change")
dev.off()

########################################################
#fgsea

resCond_vV <- results(ddsObj, 
                  name="condition_Sensitive_vs_Resistant", 
                  alpha = 0.05)

resCond_vV  <- as.data.frame(resCond_vV) %>% 
    rownames_to_column("GeneID") %>% 
    left_join( annotL, "GeneID") 
    

resCond_vV.nona<- resCond_vV[!is.na(resCond_vV$Symbol),]
resCond_vV.0.05 <- resCond_vV.nona[(resCond_vV.nona$padj < 0.05),]
resCond_vV.0.05 <- resCond_vV.0.05[!is.na(resCond_vV.0.05$GeneID),]
dim(resCond_vV.0.05) #3557

#https://stephenturner.github.io/deseq-to-fgsea/
res2t <- resCond_vV

res2 <- res2t %>% 
  dplyr::select(Symbol, stat) %>% 
  na.omit() %>% 
  distinct() %>% 
  group_by(Symbol) %>% 
  summarize(stat=mean(stat))
res2

library(fgsea)
ranks <- deframe(res2)
head(ranks, 20)
#pathways.hallmark <- gmtPathways("msigdb.v6.2.symbols.gmt")

pathways.hallmark %>% 
  head() %>% 
  lapply(head)
fgseaRes <- fgsea(pathways=pathways.hallmark, stats=ranks, nperm=1000)

fgseaResTidy <- fgseaRes %>%
  as_tibble() %>%
  arrange(desc(NES))
  
 library("DT")
# Show in a nice table:
fgseaResTidy %>% 
  dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>% 
  arrange(padj) #%>% 
  #DT::datatable()
  
    
ggplot(fgseaResTidy[c(1:50,17700:17806),], aes(reorder(pathway, NES), NES)) +
  geom_col(aes(fill=padj<0.05)) +
  coord_flip() +
  labs(x="Pathway", y="Normalized Enrichment Score",
       title="Hallmark pathways NES from GSEA") + 
  theme_minimal()






pathways.hallmark <- gmtPathways("c2.cp.kegg.v6.2.symbols.gmt")
pathways.hallmark %>% 
  head() %>% 
  lapply(head)
  
  fgseaRes <- fgsea(pathways=pathways.hallmark, stats=ranks, nperm=1000)

fgseaResTidy <- fgseaRes %>%
  as_tibble() %>%
  arrange(desc(NES))
  
 library("DT")
# Show in a nice table:
fgseaResTidy %>% 
  dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>% 
  arrange(padj) #%>% 
  #DT::datatable()
  
    
ggplot(fgseaResTidy, aes(reorder(pathway, NES), NES)) +
  geom_col(aes(fill=padj<0.05)) +
  coord_flip() +
  labs(x="Pathway", y="Normalized Enrichment Score",
       title="Hallmark pathways NES from GSEA") + 
  theme_minimal()


