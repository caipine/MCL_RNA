library(DESeq2)
library(tidyverse)

# Read the sample information into a data frame
sampleinfo <- read.delim("Samples.IBN00.txt", stringsAsFactors=F)
seqdata  <- read.table("counts/all.tsvIBN", row.names=1, header=T)



dim(seqdata)
keep <- rowSums(seqdata) > 10
countdata <- seqdata[keep,]
dim(countdata)
countdata <- as.matrix(countdata)

librarySizes <- colSums(countdata)
barplot(librarySizes, 
        names=names(librarySizes), 
        las=2, 
        main="Barplot of library sizes")
abline(h=20e6, lty=2)


# Get log2 counts per million
logcounts <- log2(countdata + 1)

# make a colour vector
tissueCol <- as.numeric(factor(sampleinfo$tissue)) + 1
# Check distributions of samples using boxplots
boxplot(logcounts, 
        xlab="", 
        ylab="Log2(Counts)",
        las=2,
        col=tissueCol)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(as.matrix(logcounts)), col="blue")


library(ggfortify)
rlogcounts <- rlog(countdata)
save(countdata, rlogcounts, sampleinfo, file="results/preprocessing.RData")


###########################################################################
###########################################################################
###########################################################################
###########################################################################

library(ggfortify)
library(DESeq2)
library(tidyverse)

load ("results/preprocessing.RData")

pdf("PCA1.pdf",width=7,height=5)
# run PCA
pcDat <- prcomp(t(rlogcounts))
# plot PCA


autoplot(pcDat)

# We can use colour and shape to identify the Cell Type and the Status of each ample
autoplot(pcDat,
         data = sampleinfo, 
         colour="condition", 
         shape="tissue",
         size=5)
         
# Specify some clearer shapes to use that have a black outline and use fill
autoplot(pcDat,
         data = sampleinfo, 
         fill="condition", 
         shape="tissue",
         size=5) +
    scale_shape_manual(values=c(21, 22,24,25)) +
    guides(fill = guide_legend(override.aes=list(shape=22)))
     
autoplot(pcDat,
         data = sampleinfo, 
         colour="tissue", 
         shape=FALSE,
label.size=6)

dev.off()

countVar <- apply(rlogcounts, 1, var)
# Get the row numbers for the top 500 most variable genes
highVar <- order(countVar, decreasing=TRUE)[1:500]
# Subset logcounts matrix
hmDat <- rlogcounts[highVar,]


library(gplots)
library(RColorBrewer)

# Get some nicer colours
mypalette <- brewer.pal(11, "RdYlBu")
# http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3
morecols <- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.sample <- c("purple","orange")[sampleinfo$condition]
# Plot the heatmap

condition_color <- unlist( lapply(sampleinfo$condition, function(x){  
                  if (grepl("Resistant", x)) "purple"     
                  else if (grepl("Sensitive", x)) "orange"
                  }))

tissue_color <- unlist( lapply(sampleinfo$tissue, function(x){  
                  if (grepl("Spleen&LN", x)) "red"     
                  else if (grepl("PB", x)) "green"
                  else if (grepl("Apheresis", x)) "yellow"
                  else if (grepl("Spleen", x)) "blue"
                })) 
 myCols <- cbind(condition_color,tissue_color )
 colnames(myCols)[1] <- "Condtion"
 colnames(myCols)[2] <- "Tissue"
 
 #install.packages("heatmap.plus")
 library("heatmap.plus")
 
 pdf("21Heatmap_unsuper.plus.pdf",width=10,height=10)
 heatmap.plus(hmDat, 
          col=rev(morecols(50)),
          trace="column", 
          main="Top 500 most variable genes across samples",
          ColSideColors=myCols,
          scale="row",
          margins = c(10,20)) 
legend(0.8,0.8,legend=c("Spleen&LN","PB","Apheresis","Spleen"),fill=c("red","green","yellow","blue"),border = F)
legend(0.8,0.7,legend=c("Resistant","Sensitive"),fill=c("purple","orange"),border = F) 
dev.off()





################
### DESeq2
# first lets check that our rows and columns match
all(sampleinfo$Sample == colnames(countdata))

# create the design formula
design <- as.formula(~ condition)
# create the DESeqDataSet object
ddsObj <- DESeqDataSetFromMatrix(countData = countdata,
                              colData = sampleinfo,
                              design = design)
                              
                              
# Apply normalisation to DDS object
ddsObj <- estimateSizeFactors(ddsObj)
sizeFactors(ddsObj)

library(limma)
logcounts <- log2(countdata + 1)

normalizedCounts <- counts(ddsObj, normalized=TRUE) 
logNormalizedCounts <- log2(normalizedCounts + 1)


pdf("Normalization_compare.pdf",width=7,height=5)
par(mfrow=c(1,2))
plotMA(logcounts, array = 7)
abline(h=0,col="grey")
plotMA(logcounts, array = 11)
abline(h=0,col="grey")


par(mfrow=c(1,2))
plotMA(logNormalizedCounts, array = 7)
abline(h=0,col="grey")
plotMA(logNormalizedCounts, array = 11)
abline(h=0,col="grey")

dev.off()

save(countdata, rlogcounts, sampleinfo, logNormalizedCounts, file="results/preprocessing_2.RData")


###########################################################################
###########################################################################
###########################################################################
###########################################################################

load("results/preprocessing_2.RData")

library(tidyverse)
library(DESeq2)

design <- as.formula(~ condition)
modelMatrix <- model.matrix(design, data = sampleinfo)
modelMatrix

# create the DESeqDataSet object
ddsObj.raw <- DESeqDataSetFromMatrix(countData = countdata,
                                     colData = sampleinfo,
                                     design = design)
                                     
vstcounts <- vst(ddsObj.raw, blind=TRUE)

pdf("PCA.pdf",width=7,height=5)
plotPCA(vstcounts, intgroup=c("condition", "tissue"))
dev.off()

# Run DESeq
ddsObj <- DESeq(ddsObj.raw)
res <- results(ddsObj, alpha=0.05)
head(res)

modelMatrix
resultsNames(ddsObj)
resLvV <- res

save(ddsObj, countdata, rlogcounts, sampleinfo, logNormalizedCounts, file="results/DE.RData")
